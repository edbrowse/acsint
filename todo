Things to do in the acsint / acsbridge world.
Some of these tasks make the system more usable;
some simply make the software more palatable to the linux community,
in hopes of submitting it to the kernel some day.
These are in no particular order.

* Follow the linux coding standards and recommendations,
at least for the two kernel modules.
This process has begun, code is indented,
and other syntax issues have been addressed.
We will need to keep this in mind as we make more changes.
Some day submit the modules for consideration in the staging area.
Just before submission, move acsint.h and ttyclicks.h into include/linux,
and use the include style #include <linux/foo.h>

* ttyclicks.c cannot sleep between clicks unless you patch the kernel.
The patch is included in this repository, but would not be accepted as is.
They would ask us to change the notifier system,
to pass back a new action code like NOTIFY_SLEEP or some such,
and I'm not sure they would even accept that.
"It's too intrusive, and nobody else wants it."

* Clicks, swoops, and notes should really be handled in keyboard.c,
along side the existing function kd_mksound().
I would add kd_mkclick() kd_mkswoop() and kd_mknotes(),
and then the ttyclicks module would use these functions,
and other modules could use them as well.
This is obviously a better approach,
a centralized suite of functions that generates sounds
through the pc speaker or equivalent.
Obviously better, but we'd have a hard time getting it approved.
I've tried.

* ttyclicks makes a quick high beep for echoed capital letters.
this is ascii, and not international.
Capital n tilde, in Spanish, won't beep properly.
This is probably not vital, but we might want to look at it some day.

* Should we have a module parameter to vary the speed
of the clicks in ttyclicks.c?
It would be course, perhaps one of 10 levels, but better than nothing.
Here are some thoughts on how to do that.
Speed is a number from 1 to 10.
Subtract this from 11 to get a delay value, 1 to 10.
This is the number of milliseconds to wait between clicks.
As mentioned earlier, this waiting is done by a cpu loop or by sleeping in vt.c.
I want the latter to be an option, even if we have to patch the kernel to get there.
So there has to be a way to sleep for n milliseconds.
The current value of n is 4.
#define TICKS_CHARWAIT 4000
If HZ = 250 then we sleep until the next jiffy.
Accomplished by  unsigned long timeout = msecs_to_jiffies(4);
If HZ = 1000 then we sleep for 4 jiffies.
If HZ = 100 then we sleep for 2 or 3 jiffies, not sure if it rounds up or down.
Thus the timing is not really what we want.
So if the sleep parameter is set, we should restrict delay to those values
that are an integer number of jiffies based on HZ.
If the math doesn't work out, then the module should printk an error message
and return -1, whence it does not load.
Or maybe printk an error message that the timing is not quite what you want,
then return 0 and load anyways.

* Maintain a table of row mappings for screen memory.
Example, since last time you refreshed, row 7 has moved up to row 5.
This could happen if the screen scrolled up twice,
because two lines were printed.
But portions of the screen can scroll separately, and they can scroll down instead of up.
The vt notifier throws these scrolling events, and my Jupiter software
catches them, and moves your reading cursor accordingly.
(Perhaps speakup does too.)
An adapter, running in screen mode, needs this functionality,
and the acsint driver / bridge does not offer it today.
I am imagining an array of 25 ints,
telling where each line has moved to since our last refresh.
When this information passes down to the bridge,
it can move your reading cursor appropriately,
and any other markers that are tied to the text in screen memory.

* Should ttyclicks.ko throttle the output even if there is no speaker?

* Can ttyclicks.ko access the sound card directly -
because doing it in user space, after the fact, is suboptimal.

* Can acsint.ko access the kernel to see what that key
and its shift state is going to produce? For echo purposes?
Culling this information out of dumpkeys is not optimal.

* Why does espeakup sometimes pass back all its index markers early?
That makes jupiter almost unusable.
Here is my test sentence.
why don't <mark name="65"/>you write me <mark name="66"/>I'm out in the jungle <mark name="67"/>I'm hungry to hear you <mark name="68"/>Send me a card <mark name="69"/>I am waiting so hard <mark name="70"/>to be near you.<mark name="71"/>
cat this into espeakup -a and watch the capital letters come out,
hopefully in sync with their words.

