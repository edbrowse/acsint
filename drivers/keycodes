#!/usr/bin/perl

# use dumpkeys to determine the keyboard layout of your system.
# Generate the strings lowercode and uppercode as used in acsint.c.

use Encode;

my %keywords = (
"Escape"=>"\\033",
"Tab"=>"\\t",
"Return"=>"\\r",
"Delete"=>"\\177",
"exclam"=>"!",
"quotedbl"=>'\\"',
"numbersign"=>"#",
"dollar"=>"\$",
"percent"=>"%",
"ampersand"=>"&",
"apostrophe"=>"'",
"parenleft"=>"(",
"parenright"=>")",
"asterisk"=>"*",
"plus"=>"+",
"comma"=>",",
"minus"=>"-",
"period"=>".",
"slash"=>"/",
"zero"=>"0",
"one"=>"1",
"two"=>"2",
"three"=>"3",
"four"=>"4",
"five"=>"5",
"six"=>"6",
"seven"=>"7",
"eight"=>"8",
"nine"=>"9",
"colon"=>":",
"semicolon"=>";",
"less"=>"<",
"equal"=>"=",
"greater"=>">",
"question"=>"?",
"at"=>"@",
"bracketleft"=>"[",
"backslash"=>"\\\\",
"bracketright"=>"]",
"asciicircum"=>"^",
"underscore"=>"_",
"grave"=>"`",
"braceleft"=>"{",
"bar"=>"|",
"braceright"=>"}",
"asciitilde"=>"~",
"nobreakspace"=>" ",
"exclamdown"=>"¡",
"cent"=>"¢",
"sterling"=>"£",
"pound"=>"£",
"currency"=>"¤",
"yen"=>"¥",
"brokenbar"=>"¦",
"section"=>"§",
"diaeresis"=>"¨",
"copyright"=>"©",
"ordfeminine"=>"ª",
"guillemotleft"=>"«",
"notsign"=>"¬",
"hyphen"=>"­",
"registered"=>"®",
"macron"=>"¯",
"degree"=>"°",
"plusminus"=>"±",
"twosuperior"=>"²",
"threesuperior"=>"³",
"acute"=>"´",
"mu"=>"µ",
"paragraph"=>"¶",
"pilcrow"=>"¶",
"periodcentered"=>"·",
"bullet"=>"•",
"cedilla"=>"¸",
"onesuperior"=>"¹",
"masculine"=>"º",
"guillemotright"=>"»",
"onequarter"=>"¼",
"onehalf"=>"½",
"threequarters"=>"¾",
"questiondown"=>"¿",
"Agrave"=>"À",
"Aacute"=>"Á",
"Acircumflex"=>"Â",
"Atilde"=>"Ã",
"Adiaeresis"=>"Ä",
"Aring"=>"Å",
"AE"=>"Æ",
"Ccedilla"=>"Ç",
"Egrave"=>"È",
"Eacute"=>"É",
"Ecircumflex"=>"Ê",
"Ediaeresis"=>"Ë",
"Igrave"=>"ì",
"Iacute"=>"Í",
"Icircumflex"=>"Î",
"Idiaeresis"=>"Ï",
"ETH"=>"Ð",
"Ntilde"=>"Ñ",
"Ograve"=>"Ò",
"Oacute"=>"Ó",
"Ocircumflex"=>"Ô",
"Otilde"=>"Õ",
"Odiaeresis"=>"Ö",
"multiply"=>"×",
"multiplication"=>"×",
"Ooblique"=>"Ø",
"Oslash"=>"Ø",
"Ostroke"=>"Ø",
"Ugrave"=>"Ù",
"Uacute"=>"Ú",
"Ucircumflex"=>"Û",
"Udiaeresis"=>"Ü",
"Yacute"=>"Ý",
"THORN"=>"Þ",
"ssharp"=>"ß",
"agrave"=>"à",
"aacute"=>"á",
"acircumflex"=>"â",
"atilde"=>"ã",
"adiaeresis"=>"ä",
"aring"=>"å",
"ae"=>"æ",
"ccedilla"=>"ç",
"egrave"=>"è",
"eacute"=>"é",
"ecircumflex"=>"ê",
"ediaeresis"=>"ë",
"igrave"=>"ì",
"iacute"=>"í",
"icircumflex"=>"î",
"idiaeresis"=>"ï",
"eth"=>"ð",
"ntilde"=>"ñ",
"ograve"=>"ò",
"oacute"=>"ó",
"ocircumflex"=>"ô",
"otilde"=>"õ",
"odiaeresis"=>"ö",
"division"=>"÷",
"oslash"=>"ø",
"ostroke"=>"ø",
"ugrave"=>"ù",
"uacute"=>"ú",
"ucircumflex"=>"û",
"udiaeresis"=>"ü",
"yacute"=>"ý",
"thorn"=>"þ",
"ydiaeresis"=>"ÿ",
"dead_grave"=>"Ѐ",
"dead_acute"=>"Ё",
"dead_circumflex"=>"Ђ",
"dead_tilde"=>"Ѓ",
"dead_diaeresis"=>"Є",
"dead_cedilla"=>"Ѕ",
"euro"=>"€",
"left_double_quotation_mark"=>"“",
"right_double_quotation_mark"=>"”",
"Dstroke"=>"Đ",
"dstroke"=>"đ",
"Hstroke"=>"Ħ",
"hstroke"=>"ħ",
"Lstroke"=>"Ł",
"lstroke"=>"ł",
"Tstroke"=>"Ŧ",
"tstroke"=>"ŧ",
);

my (@up, @low, @ralt);
# WARNING! If you increase this limit you have to change acsint.c
my $limit = 120;
for(my $i=0; $i<$limit; ++$i) {
$up[$i] = $low[$i] = $ralt[$i] = " ";
}

if($#ARGV >= 0) {
open FH, $ARGV[0];
} else {
open FH, "dumpkeys|";
}
while(<FH>) {
chomp;
s/\t/ /g;
s/  */ /g;
s/^ //g;
s/ *$//;
my $upset = 0;
my $altset = 0;
if(/^shift /) {
$upset = 1;
s/^shift //;
} elsif(/^altgr /) {
$altset = 1;
s/^altgr //;
}
next unless /^keycode/;
s/^keycode *//;
next unless /=/;
s/ *= */=/;
s/\+//g;
s/ /:/;
s/ .*//;
next if /=nul$/;
next if /=nul:nul$/;
next if /=F[0-9][0-9]*$/;
next if /=F[0-9][0-9]*:F[0-9][0-9]*$/;
next if /=KP_/;
next if /=(Alt|Shift|Control|Pause|Scroll_Lock|Num_Lock|Last_Console|Left|Right|Up|Down|Break|Find|Select|Insert|Help|Prior|Next|Remove)$/;

# the key code
my $k = $_;
$k =~ s/=.*//;
if($k >= $limit) {
print "Skipping code $k\n";
next;
}

my $l = $_;
$l =~ s/.*=//;
my $u = "";
my $ra = "";
my $w;
$l =~ s/:.*// if $upset|$altset;
if($l =~ /:/) {
$u = $l;
$l =~ s/:.*//;
$u =~ s/.*://;
}
$u = $l, $l = "" if $upset;
$ra = $l, $l = "" if $altset;
if(length $l == 1) {
$low[$k] = $l;
} elsif($l =~ /^u[0-9a-f]+$/i) {
$low[$k] = encode "utf8", chr hex substr $l, 1;
} elsif(length $l > 1) {
$w = $keywords{$l};
$low[$k] = $w if(length $w);
}
if(length $u == 1) {
$up[$k] = $u;
} elsif($u =~ /^u[0-9a-f]+$/i) {
$up[$k] = encode "utf8", chr hex substr $u, 1;
} elsif(length $u > 1) {
$w = $keywords{$u};
$up[$k] = $w if(length $w);
}
if(length $ra == 1) {
$ralt[$k] = $ra;
} elsif($ra =~ /^u[0-9a-f]+$/i) {
$ralt[$k] = encode "utf8", chr hex substr $ra, 1;
} elsif(length $ra > 1) {
$w = $keywords{$ra};
$ralt[$k] = $w if(length $w);
}
}
close FH;

print "static const char lowercode_s[] =\n";
print "\"";
for(my $i=0; $i<$limit; ++$i) {
print $low[$i];
}
print "\";\n";
print "static const char uppercode_s[] =\n";
print "\"";
for(my $i=0; $i<$limit; ++$i) {
print $up[$i];
}
print "\";\n";
print "static const char raltcode_s[] =\n";
print "\"";
for(my $i=0; $i<$limit; ++$i) {
print $ralt[$i];
}
print "\";\n";
