#!/usr/bin/perl

# use dumpkeys to determine the keyboard layout of your system.
# Generate the strings lowercode and uppercode as used in acsint.c.

my %keywords = (
"escape"=>"\\033",
"tab"=>"\\t",
"return"=>"\\r",
"delete"=>"\\177",
"one"=>"1",
"two"=>"2",
"three"=>"3",
"four"=>"4",
"five"=>"5",
"six"=>"6",
"seven"=>"7",
"eight"=>"8",
"nine"=>"9",
"zero"=>"0",
"parenleft"=>"(",
"parenright"=>")",
"braceleft"=>"{",
"braceright"=>"}",
"bracketleft"=>"[",
"bracketright"=>"]",
"apostrophe"=>"'",
"quotedbl"=>"\\\"",
"plus"=>"+",
"minus"=>"-",
"ampersand"=>"&",
"asciicircum"=>"^",
"asciitilde"=>"~",
"asterisk"=>"*",
"at"=>"@",
"backslash"=>"\\\\",
"bar"=>"|",
"colon"=>":",
"comma"=>",",
"dollar"=>"\$",
"equal"=>"=",
"exclam"=>"!",
"grave"=>"`",
"greater"=>">",
"less"=>"<",
"numbersign"=>"#",
"percent"=>"%",
"period"=>".",
"question"=>"?",
"semicolon"=>";",
"slash"=>"/",
"underscore"=>"_",
"sterling"=>"£",
"euro"=>"€",
"notsign"=>"¬",
"mu"=>"µ",
"ssharp"=>"ß",
"ae"=>"æ",
"eth"=>"ð",
"thorn"=>"þ",
"onequarter"=>"¼",
"onehalf"=>"½",
"threequarters"=>"¾",
"bullet"=>"·",
);

my (@up, @low, @ralt);
# WARNING! If you increase this limit you have to change acsint.c
my $limit = 120;
for(my $i=0; $i<$limit; ++$i) {
$up[$i] = $low[$i] = $ralt[$i] = " ";
}

if($#ARGV >= 0) {
open FH, $ARGV[0];
} else {
open FH, "dumpkeys|";
}
while(<FH>) {
chomp;
s/\t/ /g;
s/  */ /g;
s/^ //g;
s/ *$//;
my $upset = 0;
my $altset = 0;
if(/^shift /) {
$upset = 1;
s/^shift //;
} elsif(/^altgr /) {
$altset = 1;
s/^altgr //;
}
next unless /^keycode/;
s/^keycode *//;
next unless /=/;
s/ *= */=/;
s/\+//g;
s/ /:/;
s/ .*//;
next if /=nul$/;
next if /=nul:nul$/;
next if /=F[0-9][0-9]*$/;
next if /=F[0-9][0-9]*:F[0-9][0-9]*$/;
next if /=(Alt|Shift|Control|Pause|Scroll_Lock|Num_Lock|Last_Console|Left|Right|Up|Down|Break|Find|Select|Insert|Help|Prior|Next|Remove)$/;
next if /=KP_/;

# the key code
my $k = $_;
$k =~ s/=.*//;
if($k >= $limit) {
print "Skipping code $k\n";
next;
}

my $l = $_;
$l =~ s/.*=//;
my $u = "";
my $ra = "";
my ($lv, $uv, $av);
$l =~ s/:.*// if $upset|$altset;
if($l =~ /:/) {
$u = $l;
$l =~ s/:.*//;
$u =~ s/.*://;
}
$u = $l, $l = "" if $upset;
$ra = $l, $l = "" if $altset;
if(length $l == 1) {
$low[$k] = $l;
} elsif(length $l > 1) {
$lv = $keywords{lc $l};
$low[$k] = $lv if(length $lv);
}
if(length $u == 1) {
$up[$k] = $u;
} elsif(length $u > 1) {
$uv = $keywords{lc $u};
$up[$k] = $uv if(length $uv);
}
if(length $ra == 1) {
$ralt[$k] = $ra;
} elsif(length $ra > 1) {
$av = $keywords{lc $ra};
$ralt[$k] = $av if(length $av);
}
}
close FH;

print "        static const char lowercode_s[] =\n";
print "\"";
for(my $i=0; $i<$limit; ++$i) {
print $low[$i];
}
print "\";\n";
print "        static const char uppercode_s[] =\n";
print "\"";
for(my $i=0; $i<$limit; ++$i) {
print $up[$i];
}
print "\";\n";
print "        static const char raltcode_s[] =\n";
print "\"";
for(my $i=0; $i<$limit; ++$i) {
print $ralt[$i];
}
print "\";\n";
