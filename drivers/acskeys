#!/bin/sh

# use dumpkeys to determine the keyboard layout of your system.
# Generate the strings lowercode and uppercode as used in acsint.c
# the approach is dumpkeys | sed | perl
# the sed actions are all -e commands.
# The perl program is in a -e string, which is fine except the one place
# I really want to print an apostrophe, and that's where I get the goofy
# "'"'"'"

dumpkeys |
sed \
-e 's/\t/ /g' -e 's/  */ /g' \
-e '/^keycode/!d' -e 's/^keycode *//' \
 -e '/=/!d' -e 's/ *= */=/' \
-e 's/\+//g' \
-e 's/ *$//' \
-e 's/ /|/' -e 's/ .*//' \
-e '/=nul$/d' -e '/=nul|nul$/d' \
-e '/=F[0-9][0-9]*$/d' -e '/=F[0-9][0-9]*|F[0-9][0-9]*$/d' \
-e '/=Alt$/d' -e '/=Shift$/d' -e '/=Control$/d' \
-e '/=Pause$/d' -e '/=Scroll_Lock$/d' -e '/=Num_Lock$/d' \
-e '/=Last_Console$/d' \
-e '/=Left$/d' -e '/=Right$/d' -e '/=Up$/d' -e '/=Down$/d' \
-e '/=Break$/d' -e '/=Find$/d' -e '/=Select$/d' -e '/=Insert$/d' \
-e '/=Help$/d' -e '/=Prior$/d' -e '/=Next$/d' -e '/=Remove$/d' \
-e '/=KP_/d' |
perl -e '
my %keywords = (
"escape"=>"\\033",
"tab"=>"\\t",
"return"=>"\\r",
"delete"=>"\\177",
"one"=>"1",
"two"=>"2",
"three"=>"3",
"four"=>"4",
"five"=>"5",
"six"=>"6",
"seven"=>"7",
"eight"=>"8",
"nine"=>"9",
"zero"=>"0",
"parenleft"=>"(",
"parenright"=>")",
"braceleft"=>"{",
"braceright"=>"}",
"bracketleft"=>"[",
"bracketright"=>"]",
"apostrophe"=>"'"'"'",
"quotedbl"=>"\\\"",
"plus"=>"+",
"minus"=>"-",
"ampersand"=>"&",
"asciicircum"=>"^",
"asciitilde"=>"~",
"asterisk"=>"*",
"at"=>"@",
"backslash"=>"\\\\",
"bar"=>"|",
"colon"=>":",
"comma"=>",",
"dollar"=>"\$",
"equal"=>"=",
"exclam"=>"!",
"grave"=>"`",
"greater"=>">",
"less"=>"<",
"numbersign"=>"#",
"percent"=>"%",
"period"=>".",
"question"=>"?",
"semicolon"=>";",
"slash"=>"/",
"underscore"=>"_",
);
my (@up, @low);
my $limit = 120;
for(my $i=0; $i<$limit; ++$i) {
$up[$i] = $low[$i] = " ";
}
while(<>) {
chomp;
my $k = $_;
$k =~ s/=.*//;
if($k >= $limit) {
print "Skipping code $k\n";
next;
}
my $l = $_;
$l =~ s/.*=//;
my $u = "";
my ($lv, $uv);
if($l =~ /\|/) {
$u = $l;
$l =~ s/\|.*//;
$u =~ s/.*\|//;
}
if(length $l == 1) {
$low[$k] = $l;
} elsif(length $l > 1) {
$lv = $keywords{lc $l};
$low[$k] = $lv if(length $lv);
}
if(length $u == 1) {
$up[$k] = $u;
} elsif(length $u > 1) {
$uv = $keywords{lc $u};
$up[$k] = $uv if(length $uv);
}
}
print "        static const char lowercode[] =\n";
print "\"";
for(my $i=0; $i<$limit; ++$i) {
print $low[$i];
}
print "\";\n";
print "        static const char uppercode[] =\n";
print "\"";
for(my $i=0; $i<$limit; ++$i) {
print $up[$i];
}
print "\";\n";'
